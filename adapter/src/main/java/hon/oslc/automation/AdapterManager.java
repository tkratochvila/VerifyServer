// Start of user code Copyright
/*******************************************************************************
 * Copyright (c) 2011, 2012 IBM Corporation and others.
 *
 *  All rights reserved. This program and the accompanying materials
 *  are made available under the terms of the Eclipse Public License v1.0
 *  and Eclipse Distribution License v. 1.0 which accompanies this distribution.
 *  
 *  The Eclipse Public License is available at http://www.eclipse.org/legal/epl-v10.html
 *  and the Eclipse Distribution License is available at
 *  http://www.eclipse.org/org/documents/edl-v10.php.
 *  
 *  Contributors:
 *  
 *	   Sam Padgett	       - initial API and implementation
 *     Michael Fiedler     - adapted for OSLC4J
 *     Jad El-khoury        - initial implementation of code generator (https://bugs.eclipse.org/bugs/show_bug.cgi?id=422448)
 *     Matthieu Helleboid   - Support for multiple Service Providers.
 *     Anass Radouani       - Support for multiple Service Providers.
 *
 * This file is generated by org.eclipse.lyo.oslc4j.codegenerator
 *******************************************************************************/
// End of user code

package hon.oslc.automation;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.ServletContextEvent;
import java.util.List;

import org.eclipse.lyo.oslc4j.core.model.ServiceProvider;
import org.eclipse.lyo.oslc4j.core.model.AbstractResource;
import hon.oslc.automation.servlet.ServiceProviderCatalogSingleton;
import hon.oslc.automation.ServiceProviderInfo;
import org.eclipse.lyo.oslc.domains.auto.AutomationPlan;
import org.eclipse.lyo.oslc.domains.auto.AutomationRequest;
import org.eclipse.lyo.oslc.domains.auto.AutomationResult;
import hon.oslc.automation.resources.Measure;
import org.eclipse.lyo.oslc.domains.auto.ParameterDefinition;
import org.eclipse.lyo.oslc.domains.auto.ParameterInstance;
import org.eclipse.lyo.oslc.domains.Person;


// Start of user code imports

import java.util.Properties;
import java.util.regex.Pattern;
import java.util.stream.Stream;
import java.io.BufferedReader;
import java.io.Console;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.StringWriter;
import java.net.URI;
import java.net.URISyntaxException;
import java.nio.CharBuffer;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import org.apache.commons.io.FileUtils;
import org.apache.commons.io.IOUtils;
import org.apache.http.HttpEntity;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.ContentType;
import org.apache.http.entity.mime.MultipartEntityBuilder;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.eclipse.lyo.client.oslc.OslcClient;
import javax.xml.namespace.QName;
import org.w3c.dom.*;               // TODO
import javax.xml.parsers.*;         // TODO
import java.io.*;                   // TODO
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Set;
import java.util.HashSet;
import org.eclipse.lyo.oslc4j.core.model.Link;
import net.oauth.OAuthException;
import org.apache.commons.lang.StringEscapeUtils;

// End of user code

// Start of user code pre_class_code
// End of user code

public class AdapterManager {

    // Start of user code class_attributes

	/** Properties object used to load a .properties file*/
	public static Properties AdapterProperties;
	
	/** A list of AutomationPlans - a temporary storage to pair AutomaionRequests with AutomationPlans */
	public static ResourceStore<AutomationPlan> storeAutoPlans = new ResourceStore<AutomationPlan>();
	
    // End of user code
    
    
    // Start of user code class_methods

	/**
	 * Loads the Java properties configuration
	 * @throws FileNotFoundException	If the properties file is missing
	 * @throws IOException				If one of the properties is missing
	 */
	private static void loadProperties() throws FileNotFoundException, IOException
	{
		AdapterProperties = new Properties();
		AdapterProperties.load(new FileInputStream(AdapterConstants.PROPERTIES_PATH));
		
		AdapterConstants.ADAPTER_HOST = AdapterProperties.getProperty("adapter_host");	
		if (AdapterConstants.ADAPTER_HOST == null)
			throw new IOException("adapter_host missing");
		
		AdapterConstants.ADAPTER_PORT = AdapterProperties.getProperty("adapter_port");	
		if (AdapterConstants.ADAPTER_PORT == null)
            throw new IOException("adapter_port missing");
            
		AdapterConstants.VERIFY_HOST = AdapterProperties.getProperty("verify_host");	
		if (AdapterConstants.VERIFY_HOST == null)
            throw new IOException("verify_host missing");

        AdapterConstants.VERIFY_PORT = AdapterProperties.getProperty("verify_port");	
            if (AdapterConstants.VERIFY_PORT == null)
                throw new IOException("verify_port missing");
		
		AdapterConstants.updateConstants();
	}
	
	/**
	 * Get the ID of an OSLC resource from its URI (About(), or Link)
	 * @param	uri	OSLC resource uri (eg. from a Link)
	 * @return 		ID of the OSLC resource
	 */
	public static String getResourceIdFromUri(URI uri)
	{
		String uriPath = uri.getPath();
		return uriPath.substring(uriPath.lastIndexOf('/') + 1);
	}

	/**
	 * Used to store and get resources as a temporary storage
	 * @author H385332
	 */
	private static class ResourceStore<T>
	{
		List<AbstractResource> listResources = new ArrayList<AbstractResource>();
		
		/**
		 * Find a resource in the store
		 * @param about		URI of the resource use .getAbout()
		 * @return	The resource; null if not found
		 */
		public synchronized T get(URI about)
		{
			AbstractResource foundRes = null;
			for (AbstractResource res : listResources)
			{
				if (about.equals(res.getAbout()))
					foundRes = res;
			}
			return (T)foundRes;
        }

        /**
         * Removes a resource from the store
         * @param about		URI of the resource use .getAbout()
         */
        public synchronized void remove(URI about)
        {
			AbstractResource foundRes = null;
            for (AbstractResource res : listResources)
			{
                if (about.equals(res.getAbout()))
                {
                    foundRes = res;
                    break;
                }
			}
            listResources.remove(foundRes);
        }
		
		/**
		 * Add an Automation Plan into the store
		 * @param ap Automation Plan to store
		 */
		public synchronized  void add(T ap)
		{
			listResources.add((AbstractResource)ap);
		}
		
		/**
		 * @return Returns a List of <T> instead of the internal list of AbstractResources
		 */
		public synchronized List<T> getList()
		{
			List<T> ret = new ArrayList<T>();
			for (AbstractResource res : listResources)
			{
				ret.add((T) res);
			}
			return ret;
		}
	}
	
	/**
	 * Copied over from the original ForReq AutomationPlan build() method. 
	 * Creates an xml representation of the request to send to the VerifyServer.
	 * The xml contains an AutomationPlan and an AutomationRequest
	 * @param autoPlan  Automation Plan resource
	 * @param autoReq   Automation Request resource
	 * @return xml representation of the two resources - ready to send to the VerifyServer
	 */
    public static String buildRequestForReq(AutomationPlan autoPlan, AutomationRequest autoReq)
    {
        String inParams = "";

        // TODO the verify server assumes that the input parameters are in a specific order
        // The OSLC interface uses a Set to store the inputs (no ordering)
        // I added numbering into the description property to be able to order the parameters here
        List<ParameterInstance> paramInstances = new ArrayList<>(autoReq.getInputParameter());
        Comparator<ParameterInstance> cmpParamByVal = (ParameterInstance p1, ParameterInstance p2) -> Integer.parseInt(p1.getDescription()) - Integer.parseInt((p2.getDescription()));
        Collections.sort(paramInstances, cmpParamByVal);
        
        for (ParameterInstance param : paramInstances)
        {
        	inParams +=	"   <oslc_auto:inputParameter><oslc_auto:ParameterInstance>\n" +
        				"       <oslc:name>" + param.getName() + "</oslc:name><rdf:value rdf:datatype=\"http://www.w3.org/2001/XMLSchema#string\">" + param.getValue() + "</rdf:value>\n" +
        				"   </oslc_auto:ParameterInstance></oslc_auto:inputParameter>\n";
        }

        String info =
            "   <dcterms:title>" + autoPlan.getTitle() + "</dcterms:title>\n" +
            "   <dcterms:identifier>" + autoPlan.getIdentifier() + "</dcterms:identifier>\n" +
            "   <dcterms:description>" + autoPlan.getDescription() + "</dcterms:description>\n";
        return
            "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +
            "<rdf:RDF\n" +
            "   xmlns:dcterms=\"http://purl.org/dc/terms/\"\n" +
            "   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n" +
            "   xmlns:oslc=\"http://open-services.net/ns/core#\"\n" +
            "   xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n" +
            "<oslc_auto:AutomationPlan rdf:about=\"" + autoPlan.getAbout() + "\">\n" +
            info +
            "   <oslc_auto:usesExecutionEnvironment rdf:resource=\"" + autoPlan.getUsesExecutionEnvironment().iterator().next().getValue().toString() + "\"/>\n" +
            "   <dcterms:creator rdf:resource=\"" + getResourceIdFromUri(autoPlan.getCreator().iterator().next().getValue()) + "\" />\n" + // TODO what if creator is empty & this is a hack to send string instead of reference
            "   <dcterms:created>" + autoPlan.getCreated().toString() + "</dcterms:created>\n" +
            "   <dcterms:modified>Time spent on each requirement in seconds: " + autoPlan.getTimeSpent() + "</dcterms:modified>\n" +
            "</oslc_auto:AutomationPlan>\n\n" +
            
            "<oslc_auto:AutomationRequest>\n"+
            info +
            inParams +
            "   <oslc_auto:state rdf:resource=\"http://open-services.net/ns/auto#new\"/>\n" +
            "   <oslc_auto:executesAutomationPlan rdf:resource=\"" + autoPlan.getAbout().toString() + "\"/>\n" +
            "</oslc_auto:AutomationRequest>\n" +
            "</rdf:RDF>";
    }

    /**
     * Send a post request to the VerifyServer and return the response as a string.
     * @param request   HttpPost request to be sent to the server
     * @throws Exception When the request fails
     */
    public static String queryVerifyServer(HttpPost request) throws Exception
    {
        CloseableHttpClient httpClient = HttpClients.createDefault();
        
        // send the request to the VerifyServer
        CloseableHttpResponse response = null;
		try {
			response = httpClient.execute(request);
		} catch (IOException e) {
			System.err.println("ERROR: VerifyServer requet failed (server might be down, etc..)");
            throw new Exception("VerifyServer request failed: " + e.getMessage());
		}
		
		// process the response and convert it to string
        HttpEntity responseEntity = response.getEntity();
    	StringWriter writer = new StringWriter();
        try {
        	IOUtils.copy(responseEntity.getContent(), writer, StandardCharsets.US_ASCII);
        	
		} catch (IllegalStateException | IOException e) {
			// TODO not sure when this can happen
			e.printStackTrace();
            throw new Exception("VerifyServer requet failed (Unexpected error): " + e.getMessage());
        }
        
        return writer.toString();
    }
    // End of user code

    public static void contextInitializeServletListener(final ServletContextEvent servletContextEvent)
    {
        
        // Start of user code contextInitializeServletListener
    	
    	// load configuration
    	try {
    		loadProperties();
    	} catch (IOException e) {
			System.out.println("ERROR: Adapter configuration: Failed to load Java properties: " + e.getMessage());
			System.exit(1);
		}    	 

        // End of user code
    }

    public static void contextDestroyServletListener(ServletContextEvent servletContextEvent) 
    {
        
        // Start of user code contextDestroyed

        // End of user code
    }

    public static ServiceProviderInfo[] getServiceProviderInfos(HttpServletRequest httpServletRequest)
    {
        ServiceProviderInfo[] serviceProviderInfos = {};
        
        // Start of user code "ServiceProviderInfo[] getServiceProviderInfos(...)"

        ServiceProviderInfo r1 = new ServiceProviderInfo();
        r1.name = "OSLC Automation Service Provider";
        r1.serviceProviderId = AdapterConstants.AUTOMATION_PROVIDER_ID;

        serviceProviderInfos = new ServiceProviderInfo[1];
        serviceProviderInfos[0] = r1;
        
        // End of user code
        return serviceProviderInfos;
    }

    public static List<AutomationPlan> queryAutomationPlans(HttpServletRequest httpServletRequest, final String serviceProviderId, String where, int page, int limit)
    {
        List<AutomationPlan> resources = null;
        
        // Start of user code queryAutomationPlans

        resources = storeAutoPlans.getList();

        // End of user code
        return resources;
    }
    public static AutomationPlan createAutomationPlan(HttpServletRequest httpServletRequest, final AutomationPlan aResource, final String serviceProviderId)
    {
        AutomationPlan newResource = null;
        
        // Start of user code createAutomationPlan
        
    	// check that required properties are specified in the input parameter
    	if (aResource == null || aResource.getAbout() == null)
    	{
    		System.err.println("ERROR: Received an invalid AutomationPlan request - URI missing");
    		return null;
    	}

    	newResource = aResource;
    	storeAutoPlans.add(newResource);
			
        // End of user code
        return newResource;
    }
    public static AutomationRequest createAutomationRequest(HttpServletRequest httpServletRequest, final AutomationRequest aResource, final String serviceProviderId)
    {
        AutomationRequest newResource = null;
        
        // Start of user code createAutomationRequest

    	// check that required properties are specified in the input parameter
    	if (aResource == null || aResource.getExecutesAutomationPlan() == null)
    	{
    		System.err.println("ERROR: Received an invalid AutomationRequest request - executesAutomationPlan missing");
    		return null;
    	}
    	
		newResource = aResource;

		// get the executedAutomationPlan & then remove it from the store
		URI execAutoPlanURI = newResource.getExecutesAutomationPlan().getValue();
        AutomationPlan execAutoPlan = (AutomationPlan) storeAutoPlans.get(execAutoPlanURI);
		if (execAutoPlan == null)
		{
			System.err.println("ERROR: Received an AutomationRequest executing an unknown AutomationPlan!");
			System.err.println("       AutoPlan URI: " + execAutoPlanURI);
			return null;
		}
        storeAutoPlans.remove(execAutoPlanURI);

		// create the xml string for the verification request
        String requestForReq = buildRequestForReq(execAutoPlan, newResource);
        System.out.println("#########################################################\n"  // TODO debug
            + "Automation Request for the VerifyServer:\n" + requestForReq);

        // build the post request
        HttpPost post = new HttpPost(AdapterConstants.VERIFY_URL);
        post.addHeader("type", httpServletRequest.getHeader("type"));
        post.addHeader("workspace", httpServletRequest.getHeader("workspace"));
        MultipartEntityBuilder builder = MultipartEntityBuilder.create();
        builder.addBinaryBody("file", requestForReq.getBytes(), ContentType.APPLICATION_XML, httpServletRequest.getHeader("filename"));
        HttpEntity multipart = builder.build();
        post.setEntity(multipart);
        
        // send the request to the VerifyServer
    	String strResponse;
        try {
            strResponse = queryVerifyServer(post);
            
        } catch (Exception e) {
            strResponse = e.getMessage();
        }
        
        // set the state TODO adds a second state because ForReq already sets the state as NEW
        try {
            if (strResponse.contains("successfully started"))
            {
                newResource.addState(new Link(new URI(AdapterConstants.AUTOMATION_STATE_INPROGRESS)));
            }
            else if (strResponse.contains("result already known") || strResponse.contains("Error")) // TODO error means complete and then AutoResult verdict should say Error
            {
                newResource.addState(new Link(new URI(AdapterConstants.AUTOMATION_STATE_COMPLETE)));
            }
            else
            {
                // TODO are there any other possible states?
                newResource.addState(new Link(new URI(AdapterConstants.AUTOMATION_STATE_COMPLETE)));
            }
        } catch (URISyntaxException e) { /* will never happen but needs to be here to make the compiler happy */ }
        
        newResource.setVerifyServerResponse(strResponse);
        
        // End of user code
        return newResource;
    }


    public static AutomationPlan getAutomationPlan(HttpServletRequest httpServletRequest, final String serviceProviderId, final String automationPlanId)
    {
        AutomationPlan aResource = null;
        
        // Start of user code getAutomationPlan

        aResource = storeAutoPlans.get(AdapterResourcesFactory.constructURIForAutomationPlan(serviceProviderId, automationPlanId));

        // End of user code
        return aResource;
    }


    public static AutomationRequest getAutomationRequest(HttpServletRequest httpServletRequest, final String serviceProviderId, final String automationRequestId)
    {
        AutomationRequest aResource = null;
        
        // Start of user code getAutomationRequest
        // End of user code
        return aResource;
    }


    public static AutomationResult getAutomationResult(HttpServletRequest httpServletRequest, final String serviceProviderId, final String automationResultId)
    {
        AutomationResult aResource = null;
        
        // Start of user code getAutomationResult
        
        // build the post request
        HttpPost post = new HttpPost(AdapterConstants.VERIFY_URL);
        post.addHeader("type", httpServletRequest.getHeader("type"));
        post.addHeader("workspace", httpServletRequest.getHeader("workspace"));
        post.addHeader("id", httpServletRequest.getHeader("id"));

        // send the request to the VerifyServer
        try {
            String strResponse = queryVerifyServer(post);
            System.out.println("#########################################################\n"  // TODO debug
                + "Automation Result from the VerifyServer:\n" + strResponse);

            // parse the string response into aResource
            try {
                // setup the xml parser
                DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
                DocumentBuilder builder = factory.newDocumentBuilder();
                StringBuilder xmlStringBuilder = new StringBuilder();

                // parse the xml
                xmlStringBuilder.append(strResponse);
                ByteArrayInputStream input = new ByteArrayInputStream(xmlStringBuilder.toString().getBytes("UTF-8"));
                Document xml = builder.parse(input);

                // get the AutoResult rdf:about
                Element xmlAutoResult = (Element) xml.getElementsByTagName("oslc_auto:AutomationResult").item(0);
                aResource = new AutomationResult(new URI(xmlAutoResult.getAttribute("rdf:about").replace(' ', '_')));

                // get contributions (ems:Measure) -- but the verify server uses rdf:description and then rdf:type "...#Measure"
                NodeList listContributions = xml.getElementsByTagName("rdf:description");
                for (int i = 0; i < listContributions.getLength(); i++)
                {
                    Node xmlNode = listContributions.item(i);
                    Element xmlContribution = (Element) xmlNode;
                    
                    Measure newContribution = new Measure(new URI(xmlContribution.getAttribute("rdf:about").replace(' ', '_')));    // had to replace spaces with '_'
                    newContribution.setTitle(xmlContribution.getElementsByTagName("dcterms:title").item(0).getTextContent());
                    newContribution.setMetric(new Link(new URI("http://" + ((Element)xmlContribution.getElementsByTagName("ems:metric").item(0)).getAttribute("rdf:resource")))); // TODO is "foo" has to be a URI
                    newContribution.setUnitOfMeasure(new Link(new URI("http://" + ((Element)xmlContribution.getElementsByTagName("ems:unitOfMeasure").item(0)).getAttribute("rdf:resource")))); // TODO is "string" has to be a URI
                    newContribution.setNumericValue(xmlContribution.getElementsByTagName("ems:numericValue").item(0).getTextContent());
                    newContribution.addType(new Link( new URI(((Element)xmlContribution.getElementsByTagName("rdf:type").item(0)).getAttribute("rdf:resource"))));

                    aResource.addContribution(newContribution);
                }

            } catch (Exception e) {
                e.printStackTrace(); // TODO
            }
        } catch (Exception e) {
            // Verify server request failed
            // aResource will be null and thus the answer to the GET will be not found
        }

        // End of user code
        return aResource;
    }




    public static String getETagFromAutomationPlan(final AutomationPlan aResource)
    {
        String eTag = null;
        // Start of user code getETagFromAutomationPlan
        // TODO
        // End of user code
        return eTag;
    }
    public static String getETagFromAutomationRequest(final AutomationRequest aResource)
    {
        String eTag = null;
        // Start of user code getETagFromAutomationRequest
        // TODO
        // End of user code
        return eTag;
    }
    public static String getETagFromAutomationResult(final AutomationResult aResource)
    {
        String eTag = null;
        // Start of user code getETagFromAutomationResult
        // TODO
        // End of user code
        return eTag;
    }

}
