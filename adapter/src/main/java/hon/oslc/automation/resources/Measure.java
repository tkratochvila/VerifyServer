// Start of user code Copyright
/*******************************************************************************
 * Copyright (c) 2012 IBM Corporation and others.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * and Eclipse Distribution License v. 1.0 which accompanies this distribution.
 *
 * The Eclipse Public License is available at http://www.eclipse.org/legal/epl-v10.html
 * and the Eclipse Distribution License is available at
 * http://www.eclipse.org/org/documents/edl-v10.php.
 *
 * Contributors:
 *
 *     Russell Boykin       - initial API and implementation
 *     Alberto Giammaria    - initial API and implementation
 *     Chris Peters         - initial API and implementation
 *     Gianluca Bernardini  - initial API and implementation
 *       Sam Padgett          - initial API and implementation
 *     Michael Fiedler      - adapted for OSLC4J
 *     Jad El-khoury        - initial implementation of code generator (422448)
 *     Matthieu Helleboid   - Support for multiple Service Providers.
 *     Anass Radouani       - Support for multiple Service Providers.
 *
 * This file is generated by org.eclipse.lyo.oslc4j.codegenerator
 *******************************************************************************/
// End of user code

package hon.oslc.automation.resources;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.text.SimpleDateFormat;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;
import java.util.Iterator;
import javax.servlet.http.HttpServletRequest;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import javax.ws.rs.core.UriBuilder;

import org.eclipse.lyo.oslc4j.core.OSLC4JUtils;
import org.eclipse.lyo.oslc4j.core.exception.OslcCoreApplicationException;
import org.eclipse.lyo.oslc4j.core.annotation.OslcAllowedValue;
import org.eclipse.lyo.oslc4j.core.annotation.OslcDescription;
import org.eclipse.lyo.oslc4j.core.annotation.OslcMemberProperty;
import org.eclipse.lyo.oslc4j.core.annotation.OslcName;
import org.eclipse.lyo.oslc4j.core.annotation.OslcNamespace;
import org.eclipse.lyo.oslc4j.core.annotation.OslcOccurs;
import org.eclipse.lyo.oslc4j.core.annotation.OslcPropertyDefinition;
import org.eclipse.lyo.oslc4j.core.annotation.OslcRange;
import org.eclipse.lyo.oslc4j.core.annotation.OslcReadOnly;
import org.eclipse.lyo.oslc4j.core.annotation.OslcRepresentation;
import org.eclipse.lyo.oslc4j.core.annotation.OslcResourceShape;
import org.eclipse.lyo.oslc4j.core.annotation.OslcTitle;
import org.eclipse.lyo.oslc4j.core.annotation.OslcValueType;
import org.eclipse.lyo.oslc4j.core.model.AbstractResource;
import org.eclipse.lyo.oslc4j.core.model.Link;
import org.eclipse.lyo.oslc4j.core.model.Occurs;
import org.eclipse.lyo.oslc4j.core.model.OslcConstants;
import org.eclipse.lyo.oslc4j.core.model.Representation;
import org.eclipse.lyo.oslc4j.core.model.ValueType;
import org.eclipse.lyo.oslc4j.core.model.ResourceShape;
import org.eclipse.lyo.oslc4j.core.model.ResourceShapeFactory;

import hon.oslc.automation.resources.EmsDomainConstants;


import org.eclipse.lyo.oslc.domains.DctermsDomainConstants;
import hon.oslc.automation.resources.EmsDomainConstants;
import org.eclipse.lyo.oslc.domains.RdfDomainConstants;

// Start of user code imports
// End of user code

// Start of user code preClassCode
// End of user code

// Start of user code classAnnotations
// End of user code
@OslcNamespace(EmsDomainConstants.MEASURE_NAMESPACE)
@OslcName(EmsDomainConstants.MEASURE_LOCALNAME)
@OslcResourceShape(title = "Measure Resource Shape", describes = EmsDomainConstants.MEASURE_TYPE)
public class Measure
    extends AbstractResource
    implements IMeasure
{
    // Start of user code attributeAnnotation:title
    // End of user code
    private String title;
    // Start of user code attributeAnnotation:metric
    // End of user code
    private Link metric = new Link();
    // Start of user code attributeAnnotation:numericValue
    // End of user code
    private String numericValue;
    // Start of user code attributeAnnotation:unitOfMeasure
    // End of user code
    private Link unitOfMeasure = new Link();
    // Start of user code attributeAnnotation:type
    // End of user code
    private HashSet<Link> type = new HashSet<Link>();
    
    // Start of user code classAttributes
    // End of user code
    // Start of user code classMethods
    // End of user code
    public Measure()
           throws URISyntaxException
    {
        super();
    
        // Start of user code constructor1
        // End of user code
    }
    
    public Measure(final URI about)
           throws URISyntaxException
    {
        super(about);
    
        // Start of user code constructor2
        // End of user code
    }
    
    
    public static ResourceShape createResourceShape() throws OslcCoreApplicationException, URISyntaxException {
        return ResourceShapeFactory.createResourceShape(OSLC4JUtils.getServletURI(),
        OslcConstants.PATH_RESOURCE_SHAPES,
        EmsDomainConstants.MEASURE_PATH,
        Measure.class);
    }
    
    
    public String toString()
    {
        return toString(false);
    }
    
    public String toString(boolean asLocalResource)
    {
        String result = "";
        // Start of user code toString_init
        // End of user code
    
        if (asLocalResource) {
            result = result + "{a Local Measure Resource} - update Measure.toString() to present resource as desired.";
            // Start of user code toString_bodyForLocalResource
            // End of user code
        }
        else {
            result = getAbout().toString();
        }
    
        // Start of user code toString_finalize
        // End of user code
    
        return result;
    }
    
    @Deprecated
    public String toHtml()
    {
        return toHtml(false);
    }
    
    @Deprecated
    public String toHtml(boolean asLocalResource)
    {
        String result = "";
        // Start of user code toHtml_init
        // End of user code
    
        if (asLocalResource) {
            result = toString(true);
            // Start of user code toHtml_bodyForLocalResource
            // End of user code
        }
        else {
            result = "<a href=\"" + getAbout() + "\" class=\"oslc-resource-link\">" + toString() + "</a>";
        }
    
        // Start of user code toHtml_finalize
        // End of user code
    
        return result;
    }
    
    public void addType(final Link type)
    {
        this.type.add(type);
    }
    
    
    // Start of user code getterAnnotation:title
    // End of user code
    @OslcName("title")
    @OslcPropertyDefinition(DctermsDomainConstants.DUBLIN_CORE_NAMSPACE + "title")
    @OslcDescription("Title of the resource represented as rich text in XHTML content. SHOULD include only content that is valid inside an XHTML <span> element.")
    @OslcOccurs(Occurs.ExactlyOne)
    @OslcValueType(ValueType.XMLLiteral)
    @OslcReadOnly(false)
    public String getTitle()
    {
        // Start of user code getterInit:title
        // End of user code
        return title;
    }
    
    // Start of user code getterAnnotation:metric
    // End of user code
    @OslcName("metric")
    @OslcPropertyDefinition(EmsDomainConstants.ESTIMATION_AND_MEASUREMENT_NAMSPACE + "metric")
    @OslcDescription("A URI that identifies the metric.")
    @OslcOccurs(Occurs.ExactlyOne)
    @OslcValueType(ValueType.Resource)
    @OslcRepresentation(Representation.Reference)
    @OslcReadOnly(false)
    public Link getMetric()
    {
        // Start of user code getterInit:metric
        // End of user code
        return metric;
    }
    
    // Start of user code getterAnnotation:numericValue
    // End of user code
    @OslcName("numericValue")
    @OslcPropertyDefinition(EmsDomainConstants.ESTIMATION_AND_MEASUREMENT_NAMSPACE + "numericValue")
    @OslcDescription("The numeric value of the measure.")
    @OslcOccurs(Occurs.ExactlyOne)
    @OslcValueType(ValueType.XMLLiteral)
    @OslcReadOnly(false)
    public String getNumericValue()
    {
        // Start of user code getterInit:numericValue
        // End of user code
        return numericValue;
    }
    
    // Start of user code getterAnnotation:unitOfMeasure
    // End of user code
    @OslcName("unitOfMeasure")
    @OslcPropertyDefinition(EmsDomainConstants.ESTIMATION_AND_MEASUREMENT_NAMSPACE + "unitOfMeasure")
    @OslcDescription("A URI that identifies the unit of measure.")
    @OslcOccurs(Occurs.ExactlyOne)
    @OslcValueType(ValueType.Resource)
    @OslcRepresentation(Representation.Reference)
    @OslcReadOnly(false)
    public Link getUnitOfMeasure()
    {
        // Start of user code getterInit:unitOfMeasure
        // End of user code
        return unitOfMeasure;
    }
    
    // Start of user code getterAnnotation:type
    // End of user code
    @OslcName("type")
    @OslcPropertyDefinition(RdfDomainConstants.RDF_NAMSPACE + "type")
    @OslcDescription("The resource type URIs")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.Resource)
    @OslcReadOnly(false)
    public Set<Link> getType()
    {
        // Start of user code getterInit:type
        // End of user code
        return type;
    }
    
    
    // Start of user code setterAnnotation:title
    // End of user code
    public void setTitle(final String title )
    {
        // Start of user code setterInit:title
        // End of user code
        this.title = title;
    
        // Start of user code setterFinalize:title
        // End of user code
    }
    
    // Start of user code setterAnnotation:metric
    // End of user code
    public void setMetric(final Link metric )
    {
        // Start of user code setterInit:metric
        // End of user code
        this.metric = metric;
    
        // Start of user code setterFinalize:metric
        // End of user code
    }
    
    // Start of user code setterAnnotation:numericValue
    // End of user code
    public void setNumericValue(final String numericValue )
    {
        // Start of user code setterInit:numericValue
        // End of user code
        this.numericValue = numericValue;
    
        // Start of user code setterFinalize:numericValue
        // End of user code
    }
    
    // Start of user code setterAnnotation:unitOfMeasure
    // End of user code
    public void setUnitOfMeasure(final Link unitOfMeasure )
    {
        // Start of user code setterInit:unitOfMeasure
        // End of user code
        this.unitOfMeasure = unitOfMeasure;
    
        // Start of user code setterFinalize:unitOfMeasure
        // End of user code
    }
    
    // Start of user code setterAnnotation:type
    // End of user code
    public void setType(final Set<Link> type )
    {
        // Start of user code setterInit:type
        // End of user code
        this.type.clear();
        if (type != null)
        {
            this.type.addAll(type);
        }
    
        // Start of user code setterFinalize:type
        // End of user code
    }
    
    
    @Deprecated
    static public String titleToHtmlForCreation (final HttpServletRequest httpServletRequest)
    {
        String s = "";
    
        // Start of user code "Init:titleToHtmlForCreation(...)"
        // End of user code
    
        s = s + "<label for=\"title\">title: </LABEL>";
    
        // Start of user code "Mid:titleToHtmlForCreation(...)"
        // End of user code
    
        s= s + "<input name=\"title\" type=\"text\" style=\"width: 400px\" id=\"title\" >";
        // Start of user code "Finalize:titleToHtmlForCreation(...)"
        // End of user code
    
        return s;
    }
    
    @Deprecated
    static public String metricToHtmlForCreation (final HttpServletRequest httpServletRequest)
    {
        String s = "";
    
        // Start of user code "Init:metricToHtmlForCreation(...)"
        // End of user code
    
        s = s + "<label for=\"metric\">metric: </LABEL>";
    
        // Start of user code "Mid:metricToHtmlForCreation(...)"
        // End of user code
    
        // Start of user code "Finalize:metricToHtmlForCreation(...)"
        // End of user code
    
        return s;
    }
    
    @Deprecated
    static public String numericValueToHtmlForCreation (final HttpServletRequest httpServletRequest)
    {
        String s = "";
    
        // Start of user code "Init:numericValueToHtmlForCreation(...)"
        // End of user code
    
        s = s + "<label for=\"numericValue\">numericValue: </LABEL>";
    
        // Start of user code "Mid:numericValueToHtmlForCreation(...)"
        // End of user code
    
        s= s + "<input name=\"numericValue\" type=\"text\" style=\"width: 400px\" id=\"numericValue\" >";
        // Start of user code "Finalize:numericValueToHtmlForCreation(...)"
        // End of user code
    
        return s;
    }
    
    @Deprecated
    static public String unitOfMeasureToHtmlForCreation (final HttpServletRequest httpServletRequest)
    {
        String s = "";
    
        // Start of user code "Init:unitOfMeasureToHtmlForCreation(...)"
        // End of user code
    
        s = s + "<label for=\"unitOfMeasure\">unitOfMeasure: </LABEL>";
    
        // Start of user code "Mid:unitOfMeasureToHtmlForCreation(...)"
        // End of user code
    
        // Start of user code "Finalize:unitOfMeasureToHtmlForCreation(...)"
        // End of user code
    
        return s;
    }
    
    @Deprecated
    static public String typeToHtmlForCreation (final HttpServletRequest httpServletRequest)
    {
        String s = "";
    
        // Start of user code "Init:typeToHtmlForCreation(...)"
        // End of user code
    
        s = s + "<label for=\"type\">type: </LABEL>";
    
        // Start of user code "Mid:typeToHtmlForCreation(...)"
        // End of user code
    
        // Start of user code "Finalize:typeToHtmlForCreation(...)"
        // End of user code
    
        return s;
    }
    
    
    @Deprecated
    public String titleToHtml()
    {
        String s = "";
    
        // Start of user code titletoHtml_mid
        // End of user code
    
        try {
            if (title == null) {
                s = s + "<em>null</em>";
            }
            else {
                s = s + title.toString();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    
        // Start of user code titletoHtml_finalize
        // End of user code
    
        return s;
    }
    
    @Deprecated
    public String metricToHtml()
    {
        String s = "";
    
        // Start of user code metrictoHtml_mid
        // End of user code
    
        try {
            if ((metric == null) || (metric.getValue() == null)) {
                s = s + "<em>null</em>";
            }
            else {
                s = s + metric.getValue().toString();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    
        // Start of user code metrictoHtml_finalize
        // End of user code
    
        return s;
    }
    
    @Deprecated
    public String numericValueToHtml()
    {
        String s = "";
    
        // Start of user code numericValuetoHtml_mid
        // End of user code
    
        try {
            if (numericValue == null) {
                s = s + "<em>null</em>";
            }
            else {
                s = s + numericValue.toString();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    
        // Start of user code numericValuetoHtml_finalize
        // End of user code
    
        return s;
    }
    
    @Deprecated
    public String unitOfMeasureToHtml()
    {
        String s = "";
    
        // Start of user code unitOfMeasuretoHtml_mid
        // End of user code
    
        try {
            if ((unitOfMeasure == null) || (unitOfMeasure.getValue() == null)) {
                s = s + "<em>null</em>";
            }
            else {
                s = s + unitOfMeasure.getValue().toString();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    
        // Start of user code unitOfMeasuretoHtml_finalize
        // End of user code
    
        return s;
    }
    
    @Deprecated
    public String typeToHtml()
    {
        String s = "";
    
        // Start of user code typetoHtml_mid
        // End of user code
    
        try {
            s = s + "<ul>";
            for(Link next : type) {
                s = s + "<li>";
                if (next.getValue() == null) {
                    s= s + "<em>null</em>";
                }
                else {
                    s = s + "<a href=\"" + next.getValue().toString() + "\">" + next.getValue().toString() + "</a>";
                }
                s = s + "</li>";
            }
            s = s + "</ul>";
        } catch (Exception e) {
            e.printStackTrace();
        }
    
        // Start of user code typetoHtml_finalize
        // End of user code
    
        return s;
    }
    
    
}
